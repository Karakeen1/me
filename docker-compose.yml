# docker-compose.yml
services:
  # DWH that dbt use
  postgres_dwh:
    image: postgres:15
    container_name: postgres_dwh
    hostname: postgres_dwh
    ports:
      - 5432:5432
    volumes:
      - dwh:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_DB=dwh
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    networks:
      - docker_example_network

  # dagster containers is below
  docker_example_postgresql:
    image: postgres:15
    container_name: docker_example_postgresql
    environment:
      POSTGRES_USER: "postgres_user"
      POSTGRES_PASSWORD: "postgres_password"
      POSTGRES_DB: "postgres_db"
    networks:
      - docker_example_network
    volumes:
      - postgres_volume:/var/lib/postgresql/data

  docker_example_user_code:
    build:
      context: .
      dockerfile: ./Dockerfile_user_code
    container_name: docker_example_user_code
    image: docker_example_user_code_image
    restart: always
    environment:
      DAGSTER_POSTGRES_USER: "postgres_user"
      DAGSTER_POSTGRES_PASSWORD: "postgres_password"
      DAGSTER_POSTGRES_DB: "postgres_db"
      DAGSTER_CURRENT_IMAGE: "docker_example_user_code_image"
      DAGSTER_DBT_PARSE_PROJECT_ON_LOAD: 1
    networks:
      - docker_example_network
    volumes:
      - "C:/Users/mmose/OneDrive/Programmieren/MoserEnergie/repo.py:/opt/dagster/app/repo.py"
      - "C:/Users/mmose/OneDrive/Programmieren/MoserEnergie/me_dbt:/opt/dagster/app/me_dbt"

  docker_example_webserver:
    build:
      context: .
      dockerfile: ./Dockerfile_dagster
    entrypoint:
      - dagster-webserver
      - -h
      - "0.0.0.0"
      - -p
      - "3000"
      - -w
      - workspace.yaml
    container_name: docker_example_webserver
    expose:
      - "3000"
    ports:
      - "3000:3000"
    environment:
      DAGSTER_POSTGRES_USER: "postgres_user"
      DAGSTER_POSTGRES_PASSWORD: "postgres_password"
      DAGSTER_POSTGRES_DB: "postgres_db"
    volumes: # Make docker client accessible so we can terminate containers from the webserver
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/io_manager_storage:/tmp/io_manager_storage
    networks:
      - docker_example_network
    depends_on:
      - docker_example_postgresql
      - docker_example_user_code

  docker_example_daemon:
    build:
      context: .
      dockerfile: ./Dockerfile_dagster
    entrypoint:
      - dagster-daemon
      - run
    container_name: docker_example_daemon
    restart: on-failure
    environment:
      DAGSTER_POSTGRES_USER: "postgres_user"
      DAGSTER_POSTGRES_PASSWORD: "postgres_password"
      DAGSTER_POSTGRES_DB: "postgres_db"
    volumes: # Make docker client accessible so we can launch containers using host docker
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/io_manager_storage:/tmp/io_manager_storage
    networks:
      - docker_example_network
    depends_on:
      - docker_example_postgresql
      - docker_example_user_code

networks:
  docker_example_network:
    driver: bridge
    name: docker_example_network

volumes:
  dwh:
  postgres_volume:
    name: dagster_postgres_volume